/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import { Attio } from "@fern-api/attio";
import urlJoin from "url-join";
import * as serializers from "../../../../../../serialization";
import * as errors from "../../../../../../errors";

export declare namespace Objects {
    interface Options {
        environment?: environments.AttioEnvironment | string;
        token?: core.Supplier<core.BearerToken | undefined>;
    }
}

export class Objects {
    constructor(private readonly options: Objects.Options) {}

    /**
     * Lists all system-defined and user-defined objects in your workspace, including their defined attributes.
     */
    public async list(): Promise<Attio.particle.ListObjectResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.AttioEnvironment.Production, "/v2/objects"),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
            },
            contentType: "application/json",
        });
        if (_response.ok) {
            return await serializers.particle.ListObjectResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.AttioError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AttioError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AttioTimeoutError();
            case "unknown":
                throw new errors.AttioError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Gets a single Object by its `object_id`.
     */
    public async get(objectId: string): Promise<Attio.particle.GetObjectResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.AttioEnvironment.Production,
                `/v2/objects/${objectId}`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
            },
            contentType: "application/json",
        });
        if (_response.ok) {
            return await serializers.particle.GetObjectResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.AttioError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AttioError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AttioTimeoutError();
            case "unknown":
                throw new errors.AttioError({
                    message: _response.error.errorMessage,
                });
        }
    }

    private async _getAuthorizationHeader() {
        const bearer = await core.Supplier.get(this.options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
